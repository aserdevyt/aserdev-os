#!/usr/bin/env bash

set -euo pipefail
set -o errtrace
IFS=$'\n\t'

WORKSPACE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HOME_DIR="${HOME:-/root}"
SILENT=0

# Logging
TIMESTAMP="$(date +%Y%m%d-%H%M%S)"
LOGFILE="$HOME_DIR/aserdev-installer.$TIMESTAMP.log"
exec > >(tee -a "$LOGFILE") 2>&1

# ANSI color variables
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
WHITE="\033[37m"
BOLD="\033[1m"
RESET="\033[0m"

# Packages list
PKGS=(
  htop btop hyprland hyprpaper grimblast hyprpicker waybar rofi-wayland rofi-emoji swaync waypaper xdg-desktop-portal-hyprland kitty thunar pluma qt5ct qt6ct cmake cpio glaze hyprland-protocols uwsm grimblast-git libnotify hyprpicker wl-clipboard otf-font-awesome xsel xclip gvfs slurp grim zsh imagemagick python-pygments libcanberra catfish gvfs tumbler thunar-volman thunar-archive-plugin thunar-media-tags-plugin ffmpegthumbnailer poppler-glib yt-dlp ffmpeg libgsf nvim vi vim nano less git curl wget aria2 microsoft-edge-stable libgepub libopenraw freetype2 plocate zeitgeist python-requests file-roller unzip unrar discord pipewire pipewire-alsa pipewire-jack pipewire-pulse pipewire-v4l2 gst-plugin-pipewire wireplumber pavucontrol pamixer pulsemixer paprefs networkmanager network-manager-applet nm-connection-editor libnm networkmanager-openvpn networkmanager-pptp networkmanager-vpnc networkmanager-openconnect networkmanager-l2tp networkmanager-strongswan cliphist bat yay wlogout ttf-jetbrains-mono-nerd fcitx5 fcitx5-configtool fcitx5-qt fcitx5-gtk fcitx5-mozc fastfetch dracula-gtk-theme colloid-icon-theme noto-fonts-emoji ttf-iosevka-nerd pavucontrol vlc vlc-plugins-all fzf bat polkit-gnome visual-studio-code-bin qbittorrent figlet rsync jdk-openjdk inotify-tools wf-recorder
)

# Files/dirs to skip copying from workspace
SKIP_BASENAMES=( ".git" ".gitignore" ".DS_Store" "install" )

# oh-my-zsh targets (install into runner's ~)
ZSH_DIR="$HOME_DIR/.oh-my-zsh"
ZSH_CUSTOM="$ZSH_DIR/custom"
PLUGINS_DIR="$ZSH_CUSTOM/plugins"
THEMES_DIR="$ZSH_CUSTOM/themes"
ZSHRC="$HOME_DIR/.zshrc"

# GitHub issues URL for reporting failures
ISSUES_URL="https://github.com/aserdevyt/aserdev-os/issues"

log()   { printf '%b\n' "$*"; }
debug() { log "${CYAN}[DEBUG]${RESET} $*"; }
info()  { log "${GREEN}[INFO] ${RESET}$*"; }
err()   { log "${RED}[ERROR]${RESET} $*" >&2; }

on_error() {
  local lineno=${1:-unknown}
  err "Script failed (line: $lineno)."
  err "Log saved to: $LOGFILE"
  echo
  echo -e "${YELLOW}If this looks like a bug or you need help, please open an issue here:${RESET}"
  echo -e "${BLUE}${ISSUES_URL}${RESET}"
  echo
  exit 1
}
trap 'on_error $LINENO' ERR
trap 'echo -e "\n${YELLOW}Interrupted by user. Log: $LOGFILE${RESET}"; exit 130' INT

ask_yes_no() {
  local prompt="${1:-Continue? [y/N]: }"
  if [[ $SILENT -eq 1 ]]; then
    return 1
  fi
  read -r -p "$prompt" ans
  [[ "$ans" =~ ^[Yy]$ ]]
}

wait_for_pacman() {
  local timeout=60
  while [[ -f /var/lib/pacman/db.lck && $timeout -gt 0 ]]; do
    debug "pacman/db.lck present â€” waiting... ($timeout)"
    sleep 1
    ((timeout--))
  done
  if [[ -f /var/lib/pacman/db.lck ]]; then
    err "pacman is locked. Try again later."
    exit 1
  fi
}

ensure_tool() {
  local tool=$1 pkg=${2:-$1}
  if ! command -v "$tool" >/dev/null 2>&1; then
    wait_for_pacman
    info "Installing missing tool: $pkg"
    sudo pacman -S --noconfirm --needed "$pkg"
  else
    debug "$tool present"
  fi
}

check_internet() {
  debug "Checking internet connectivity..."
  if ping -c 1 -W 2 archlinux.org &>/dev/null; then
    debug "Internet OK."
  else
    err "No internet connection detected. Exiting."
    exit 1
  fi
}

ensure_yay() {
  if command -v yay &>/dev/null 2>&1; then
    debug "yay present"
    return
  fi
  info "yay not found. Installing prerequisites and yay..."
  wait_for_pacman
  sudo pacman -S --noconfirm --needed git base-devel || err "Failed to install base-devel/git"
  tmpdir="$(mktemp -d)"
  git clone https://aur.archlinux.org/yay.git "$tmpdir" || { err "Failed to clone yay"; rm -rf "$tmpdir"; exit 1; }
  pushd "$tmpdir" >/dev/null
  makepkg -si --noconfirm || { err "makepkg for yay failed"; popd >/dev/null; rm -rf "$tmpdir"; exit 1; }
  popd >/dev/null
  rm -rf "$tmpdir"
}

install_packages() {
  info "Installing packages with yay (no full system upgrade)..."
  yay -S --noconfirm --needed "${PKGS[@]}" || err "Some packages failed to install; check yay output above and the log $LOGFILE"
}

install_sddm() {
  if ! pacman -Qi sddm &>/dev/null; then
    info "Installing SDDM..."
    sudo pacman -S --noconfirm sddm
  else
    debug "SDDM already installed."
  fi
  info "Enabling SDDM..."
  sudo systemctl enable sddm
}

enable_services() {
  info "Checking and enabling essential services (system-wide)..."

  # --- NetworkManager check ---
  if ! systemctl is-active --quiet NetworkManager 2>/dev/null; then
    info "NetworkManager not running, enabling it globally..."
    sudo systemctl enable --now NetworkManager.service || err "Failed to enable NetworkManager"
  else
    debug "NetworkManager is active âœ…"
  fi

  # --- PipeWire check ---
  if ! systemctl --user is-active --quiet pipewire 2>/dev/null; then
    info "Attempting to enable PipeWire services system-wide..."
    # --global is supported on systemd; use careful enablement
    sudo systemctl enable --global pipewire.service pipewire-pulse.service wireplumber.service || debug "Global enable may not be supported in chroot/container"
    info "Enabled PipeWire globally (best-effort)"
  else
    debug "PipeWire already active for user âœ…"
  fi
}

copy_workspace() {
  ensure_tool rsync rsync

  debug "Merging files from workspace: $WORKSPACE_DIR â†’ $HOME_DIR"
  shopt -s nullglob dotglob
  local items=( "$WORKSPACE_DIR"/* )
  shopt -u dotglob

  for ITEM in "${items[@]}"; do
    local BASENAME TARGET
    BASENAME="$(basename "$ITEM")"
    TARGET="$HOME_DIR/$BASENAME"

    for skip in "${SKIP_BASENAMES[@]}"; do
      [[ "$BASENAME" == "$skip" ]] && { debug "Skipping $BASENAME"; continue 2; }
    done

    debug "Processing $BASENAME â†’ $TARGET"

    if [[ -d "$ITEM" && ! -L "$ITEM" ]]; then
      debug "Merging directory $BASENAME"
      mkdir -p "$TARGET"
      rsync -a --info=NAME --omit-dir-times -- "$ITEM"/ "$TARGET"/
      info "Merged $BASENAME âœ…"
    else
      if [[ -e "$TARGET" ]]; then
        if [[ $SILENT -eq 0 ]]; then
          ask_yes_no "Replace $TARGET? [y/N]: " || { debug "Skipped $BASENAME"; continue; }
        fi
      fi
      cp -a -- "$ITEM" "$TARGET"
      info "Installed $BASENAME âœ…"
    fi
  done
}

# --- oh-my-zsh + p10k + plugins stuff ---
clone_if_missing() {
  local repo="$1"
  local dest="$2"
  local name="$3"
  if [[ -d "$dest" && -d "$dest/.git" ]]; then
    info "$name already present (git repo) â€” skipping clone."
    return 0
  fi
  if [[ -d "$dest" && ! -d "$dest/.git" ]]; then
    info "$name directory exists (non-git) â€” skipping clone."
    return 0
  fi
  info "Cloning $name â†’ $dest"
  git clone --depth=1 "$repo" "$dest"
}

install_oh_my_zsh() {
  if [[ -d "$ZSH_DIR" && -f "$ZSH_DIR/oh-my-zsh.sh" ]]; then
    info "oh-my-zsh already installed at $ZSH_DIR â€” skipping clone."
  else
    info "Installing oh-my-zsh into $ZSH_DIR..."
    git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git "$ZSH_DIR"
  fi
  mkdir -p "$PLUGINS_DIR" "$THEMES_DIR"
}

install_powerlevel10k() {
  local dest="$THEMES_DIR/powerlevel10k"
  clone_if_missing https://github.com/romkatv/powerlevel10k.git "$dest" "powerlevel10k"
}

install_plugins() {
  local -a plugins=(
    "https://github.com/zsh-users/zsh-autosuggestions.git|$PLUGINS_DIR/zsh-autosuggestions|zsh-autosuggestions"
    "https://github.com/zsh-users/zsh-syntax-highlighting.git|$PLUGINS_DIR/zsh-syntax-highlighting|zsh-syntax-highlighting"
    "https://github.com/zsh-users/zsh-completions.git|$PLUGINS_DIR/zsh-completions|zsh-completions"
    "https://github.com/Aloxaf/fzf-tab.git|$PLUGINS_DIR/fzf-tab|fzf-tab"
  )

  for entry in "${plugins[@]}"; do
    IFS='|' read -r repo dest name <<< "$entry"
    clone_if_missing "$repo" "$dest" "$name"
  done
}

write_zshrc() {
  info "Writing ${ZSHRC} (backing up old one if present)..."
  if [[ -f "$ZSHRC" ]]; then
    cp -a "$ZSHRC" "${ZSHRC}.bak.$(date +%s)"
    info "Backed up existing .zshrc to ${ZSHRC}.bak.<ts>"
  fi

  cat > "$ZSHRC" <<'EOF'
# --- autogenerated by aserdev installer ---
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

plugins=(git archlinux z zsh-autosuggestions zsh-syntax-highlighting zsh-completions fzf-tab sudo colored-man-pages)

# enable oh-my-zsh core
source "$ZSH/oh-my-zsh.sh"

# plugin sources (explicit; kept as you requested)
source "$ZSH/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" || true
source "$ZSH/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" || true
source "$ZSH/custom/plugins/fzf-tab/fzf-tab.plugin.zsh" || true

# colored man pages ðŸ˜Ž
export LESS_TERMCAP_mb=$'\e[1;31m'
export LESS_TERMCAP_md=$'\e[1;36m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[1;44;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;32m'

# user files (if you keep them in ~)
[[ -f "$HOME/.zsh_aliases" ]] && source "$HOME/.zsh_aliases"
[[ -f "$HOME/.zsh_env" ]] && source "$HOME/.zsh_env"

# Load p10k if installed
[[ -f "${ZSH_CUSTOM:-$ZSH/custom}/themes/powerlevel10k/powerlevel10k.zsh-theme" ]] && source "${ZSH_CUSTOM:-$ZSH/custom}/themes/powerlevel10k/powerlevel10k.zsh-theme"
# --- end autogenerated ---
EOF
  info "Wrote .zshrc"
}

set_default_shell_to_zsh() {
  # Determine actual non-root user to change shell for
  if [[ -n "${SUDO_USER:-}" && "${SUDO_USER}" != "root" ]]; then
    ACTUAL_USER="$SUDO_USER"
  else
    ACTUAL_USER="$USER"
  fi

  if [[ "$ACTUAL_USER" == "root" ]]; then
    info "Script running as root; skipping chsh. Run 'chsh -s $(command -v zsh) <user>' manually."
  else
    info "Setting default shell to zsh for $ACTUAL_USER"
    sudo -u "$ACTUAL_USER" chsh -s "$(command -v zsh)" "$ACTUAL_USER" || debug "chsh failed or user must run it manually."
  fi
}

# ---------- main ----------
if [[ "${1:-}" == "--silent" ]]; then
  SILENT=1
fi

info "Starting dotfile install... Log: $LOGFILE"
check_internet
ensure_tool rsync rsync
ensure_tool figlet figlet
ensure_yay
install_packages
install_sddm
enable_services
copy_workspace

# --- NEW: copy workspace into /etc/skel so future users inherit the same setup ---
info "Preparing dotfiles for /etc/skel (sanitizing sensitive files)..."
if [[ -d "$WORKSPACE_DIR" ]]; then
  tmp_skel="$(mktemp -d)"
  debug "Creating sanitized copy at $tmp_skel"

  # rsync from workspace to tmp dir while excluding known sensitive / unnecessary paths
  RSYNC_EXCLUDES=( --exclude ".git" --exclude ".gitignore" --exclude "install" --exclude ".ssh" --exclude ".gnupg" \
                  --exclude ".cache" --exclude "node_modules" --exclude "*.pem" --exclude "*.key" \
                  --exclude ".env" --exclude "*.secret" --exclude "*.crt" )
  rsync -a --omit-dir-times "${RSYNC_EXCLUDES[@]}" "$WORKSPACE_DIR"/ "$tmp_skel"/

  # Extra sanitization: remove any private key-like files that might slip through
  find "$tmp_skel" -type f \( -iname "id_*" -o -iname "*id_rsa*" -o -iname "*.pem" -o -iname "*.key" -o -iname "*.p12" \) -exec rm -f {} + || true

  # Tighten permissions inside the sanitized copy (dirs 755, files 644)
  find "$tmp_skel" -type d -exec chmod 0755 {} + || true
  find "$tmp_skel" -type f -exec chmod 0644 {} + || true

  # Install sanitized copy into /etc/skel
  sudo rm -rf /etc/skel/* || debug "/etc/skel cleanup failed (maybe empty or permission issue)"
  sudo mkdir -p /etc/skel
  sudo cp -a "$tmp_skel"/. /etc/skel/
  sudo chown -R root:root /etc/skel

  # Defensive cleanup: ensure no user secrets remain
  sudo rm -rf /etc/skel/.ssh /etc/skel/.gnupg /etc/skel/.cache || true

  # clean tmp
  rm -rf "$tmp_skel" || true
  info "âœ… /etc/skel updated (sanitized) â€” new users will start with your setup!"
else
  err "Workspace dir $WORKSPACE_DIR not found; skipping /etc/skel copy."
fi

# --- Set default shell for future users (if writable) ---
zsh_path="$(command -v zsh || echo /bin/zsh)"
if [[ -w /etc/default/useradd ]]; then
  # replace existing SHELL= line or append if missing
  if grep -q "^SHELL=" /etc/default/useradd 2>/dev/null; then
    sudo sed -i "s#^SHELL=.*#SHELL=$zsh_path#" /etc/default/useradd || true
  else
    echo "SHELL=$zsh_path" | sudo tee -a /etc/default/useradd >/dev/null || true
  fi
  info "Set default shell for new users to $zsh_path"
else
  debug "/etc/default/useradd not writable; skipping default shell update"
fi


# ensure git & zsh are available before oh-my-zsh steps
if ! command -v git &>/dev/null || ! command -v zsh &>/dev/null; then
  info "git and/or zsh missing after package install â€” attempting to install minimal via pacman..."
  if command -v pacman &>/dev/null; then
    wait_for_pacman
    sudo pacman -S --noconfirm --needed git zsh curl wget || true
  fi
fi

install_oh_my_zsh
install_powerlevel10k
install_plugins
write_zshrc

# change shell safely
set_default_shell_to_zsh

clear
if command -v figlet &>/dev/null; then
  figlet "warning" || true
fi

echo -e "${YELLOW}${BOLD}When you reboot you will be put in SDDM but don't rush into login,${RESET}"
echo -e "${YELLOW}click your username first, then the gear icon, and select Hyprland session${RESET}"
echo -e "${YELLOW}before logging in. Otherwise you may end up in a gnome session which you don't want.${RESET}"
info "âœ… All done! Merged configs, installed packages, set up oh-my-zsh + p10k + plugins, enabled SDDM, and made sure PipeWire + NetworkManager are running."
info "Log file: $LOGFILE"
info "If something bad happened, please open an issue: $ISSUES_URL"

# Helpful hint
info "Run 'exec zsh' to start the new shell and 'p10k configure' to tweak the theme."

# --- Install user-level Waybar auto-reload service (uses inotify-tools) ---
info "Installing Waybar auto-reload (systemd --user) for primary user..."
# determine target user/home (respect sudo)
if [[ -n "${SUDO_USER:-}" && "${SUDO_USER}" != "root" ]]; then
  TARGET_USER="$SUDO_USER"
  TARGET_HOME="$(getent passwd "$TARGET_USER" | cut -d: -f6)"
else
  TARGET_USER="$(id -un)"
  TARGET_HOME="$HOME_DIR"
fi
info "Target user: $TARGET_USER (home: $TARGET_HOME)"

# create watcher script and systemd unit as the target user
sudo -u "$TARGET_USER" bash -lc '
mkdir -p "$HOME/.local/bin" "$HOME/.config/systemd/user"
cat > "$HOME/.local/bin/waybar-autoreload.sh" <<'BASH'
#!/usr/bin/env bash
# waybar-autoreload â€” watches ~/.config/waybar and sends SIGUSR2 to waybar on changes
WATCH_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/waybar"

# require inotifywait
if ! command -v inotifywait &>/dev/null; then
  notify-send "waybar-autoreload" "inotifywait not found â€” install inotify-tools"
  echo "ERROR: inotifywait not found. Install inotify-tools (pacman -S inotify-tools)"; exit 1
fi

# Ensure directory exists
if [[ ! -d "$WATCH_DIR" ]]; then
  notify-send "waybar-autoreload" "Watch dir missing: $WATCH_DIR"
  echo "Watch dir missing: $WATCH_DIR"; exit 1
fi

notify-send "waybar-autoreload" "Watching: $WATCH_DIR"

# debounce: avoid multiple reloads within 1s
last=0
inotifywait -m -r -e close_write,create,delete,move --format '%w%f' "$WATCH_DIR" 2>/dev/null |
while read -r file; do
  now=$(date +%s)
  if (( now - last < 1 )); then
    continue
  fi
  last=$now
  # reload waybar (send SIGUSR2)
  pkill -SIGUSR2 waybar 2>/dev/null && notify-send "Waybar" "Reloaded (trigger: ${file##*/})"
done
BASH

chmod +x "$HOME/.local/bin/waybar-autoreload.sh"

cat > "$HOME/.config/systemd/user/waybar-autoreload.service" <<'UNIT'
[Unit]
Description=Auto-reload Waybar on config changes (~/.config/waybar)
After=graphical-session.target

[Service]
Type=simple
ExecStart=%h/.local/bin/waybar-autoreload.sh
Restart=always
RestartSec=2
# keep environment sane for script
Environment=XDG_CONFIG_HOME=%h/.config

[Install]
WantedBy=default.target
UNIT
'

# reload & enable the user service (best-effort)
sudo -u "$TARGET_USER" systemctl --user daemon-reload || debug "user daemon-reload failed"
sudo -u "$TARGET_USER" systemctl --user enable --now waybar-autoreload.service || debug "could not enable waybar-autoreload.service (maybe no user session)"

info "Waybar auto-reload setup attempted for $TARGET_USER. If you see issues, enable it manually for the user."


